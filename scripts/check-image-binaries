#!/usr/bin/env bash

set -e

header() {
  local text="$1"
  local width=53  # Adjust this for desired total width
  local padding=$(( (width - ${#text}) / 2 ))  # Calculate padding for centering

  printf '%*s\n' "$width" | tr ' ' '-'
  printf '%*s%s%*s\n' "$padding" "" "$text" "$padding" ""
  printf '%*s\n' "$width" | tr ' ' '-'
}

verifyKuberlrKubectl() {
  # Loop through each architecture
  for ARCH in $ARCHES; do
      ARCH_DIR="$WORKDIR/$ARCH"
      mkdir -p "$ARCH_DIR"

      header "Processing architecture: $ARCH"

      # Pull and extract files
      CONTAINER_ID=$(docker create --platform linux/$ARCH "$IMAGE")
      docker cp "$CONTAINER_ID:/bin/kuberlr" "$ARCH_DIR/kuberlr" 2>&1 > /dev/null || echo "kuberlr not found in $IMAGE for $ARCH"
      KUBECTL_LIST=$(docker run --rm --entrypoint sh rancher/kuberlr-kubectl:v4.0.1 -c "ls /usr/bin | grep kube")
      for KUBECTL_VER in $KUBECTL_LIST; do
        docker cp "$CONTAINER_ID:/usr/bin/$KUBECTL_VER" "$ARCH_DIR/$KUBECTL_VER" 2>&1 > /dev/null || echo "kubectl ($KUBECTL_VER) not found in $IMAGE for $ARCH"
      done
      docker rm "$CONTAINER_ID" 2>&1 > /dev/null

      header "$ARCH - kuberlr BINs"
      # Verify architecture
      if [[ -f "$ARCH_DIR/kuberlr" ]]; then
          echo -n "kuberlr: " && file "$ARCH_DIR/kuberlr"
      fi
      header "$ARCH - Kubectl BINs"
      for KUBECTL_VER in $KUBECTL_LIST; do
        if [[ -f "$ARCH_DIR/$KUBECTL_VER" ]]; then
            echo -n "kuberlr($KUBECTL_VER): " && file "$ARCH_DIR/$KUBECTL_VER"
        fi
      done

      echo "Done processing $ARCH."
  done
}

# Ensure required commands are available
for cmd in docker jq file; do
    if ! command -v $cmd &>/dev/null; then
        echo "Error: $cmd is not installed." >&2
        exit 1
    fi
done

# Check if the user provided an image name and tag
if [ "$#" -ne 1 ]; then
    echo "Usage: $0 <image_name:tag>"
    exit 1
fi

IMAGE="$1"

# Create a working directory
WORKDIR="./image_arch_test"
mkdir -p "$WORKDIR"

# Fetch architectures using docker buildx imagetools
echo "Fetching architectures for $IMAGE..."
ARCHES=$(docker buildx imagetools inspect "$IMAGE" --format '{{json .Manifest.Manifests}}' | jq -r '.[].platform.architecture'|sort|uniq|grep -v unknown)

if [ -z "$ARCHES" ]; then
    echo "Failed to fetch architectures. Is the image multi-arch?"
    exit 1
fi

echo "Architectures found: $ARCHES"
if [[ "$IMAGE" == */kuberlr:* ]]; then
      # Loop through each architecture
      for ARCH in $ARCHES; do
          ARCH_DIR="$WORKDIR/$ARCH"
          mkdir -p "$ARCH_DIR"

          header "Processing architecture: $ARCH"

          # Pull and extract files
          CONTAINER_ID=$(docker create --platform linux/$ARCH "$IMAGE")
          docker cp "$CONTAINER_ID:/bin/kuberlr" "$ARCH_DIR/kuberlr" 2>&1 > /dev/null || echo "kuberlr not found in $IMAGE for $ARCH"
          docker rm "$CONTAINER_ID" 2>&1 > /dev/null

          header "$ARCH - kuberlr BINs"
          # Verify architecture
          if [[ -f "$ARCH_DIR/kuberlr" ]]; then
              echo -n "kuberlr: " && file "$ARCH_DIR/kuberlr"
          fi

          echo "Done processing $ARCH."
      done
else
  verifyKuberlrKubectl;
fi


echo "All architectures processed. Check $WORKDIR for results."