name: "Kubectl - Create Bump PR"
on:
  workflow_dispatch:
    inputs:
      target_branch:
        description: "Branch to run the update script on"
        required: true
        type: string
      script_ref:
        description: "A git ref (hash/branch) to use for the bump script"
        required: false
        type: string

  workflow_call:
    inputs:
      target_branch:
        description: "Branch to run the update script on"
        required: true
        type: string
      script_ref:
        description: "A git ref (hash/branch) to use for the bump script"
        required: false
        type: string

permissions:
  contents: write
  pull-requests: write

jobs:
  update-and-pr:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout target branch
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
        with:
          ref: ${{ inputs.target_branch }}

      - name: Check for new build system support
        id: new_build
        run: |
          if [ ! -f "kubectl-versions.txt" ]; then
            echo "❌ This branch does not support the new build system. Failing early."
            echo "is_supported=false" >> $GITHUB_ENV
            echo "changes_exist=false" >> $GITHUB_ENV
            exit 0
          fi
          echo "is_supported=true" >> $GITHUB_ENV

      - name: "Pull script from `${{ inputs.script_ref || 'main' }}` branch"
        if: ${{ env.is_supported == 'true' }}
        run: |
          git fetch origin ${{ inputs.script_ref || 'main' }}
          git checkout FETCH_HEAD -- .github/scripts/bump-kubectl-patch-versions

      - name: Run update script
        if: ${{ env.is_supported == 'true' }}
        run: bash .github/scripts/bump-kubectl-patch-versions
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Check for changes
        id: changes_check
        if: ${{ env.is_supported == 'true' }}
        run: |
          rm -f .github/scripts/bump-kubectl-patch-versions || true
          git restore --staged --worktree .github/scripts/bump-kubectl-patch-versions || true

          # Read log for PR title and clean up log file
          LOG_FILE="kubectl-versions.txt.log"
          if [[ -f "$LOG_FILE" ]]; then
            echo "Log file exists, parsing for title text..."
            # Check if the log file exists and is not empty
            if [[ -s "$LOG_FILE" ]]; then
              LOG_TITLE=$(cat "$LOG_FILE" | awk '{printf "%s%s", (NR==1?"":", "), $0} END{print ""}')
              echo "Log file content found, created title:"
              echo "$LOG_TITLE"
              echo "pr_title_versions=$LOG_TITLE" >> $GITHUB_OUTPUT
            fi
          
            echo "Removing log file: $LOG_FILE"
            rm "$LOG_FILE"
          fi

          if git diff --quiet; then
            echo "No changes detected."
            echo "changes_exist=false" >> $GITHUB_ENV
          else
            echo "Changes detected."
            git diff --name-only
            echo "changes_exist=true" >> $GITHUB_ENV
          fi

      - name: "Git: Config, create branch, commit and push"
        if: ${{ env.changes_exist == 'true' }}
        run: |
          safe_branch=$(echo "${{ inputs.target_branch }}" | sed 's/[^a-zA-Z0-9._-]/_/g')
          BRANCH="gha-kubectl/update-$safe_branch-$(date +%Y-%m-%d-%H-%M-%S)"
          echo "UPDATE_BRANCH=${BRANCH}" >> "$GITHUB_ENV"
          
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          
          git checkout -b "$BRANCH"
          git commit -a -m "Updating new kubectl patch versions"
          git push origin "$BRANCH"

      - name: Build PR body
        if: ${{ env.changes_exist == 'true' }}
        run: |
          {
            echo 'PR_BODY<<EOF'
            echo "Bumping Kubectl versions to: ${{ steps.changes_check.outputs.pr_title_versions }}"
            echo ""
            echo "Automated update using the kubectl bump script from \`${{ inputs.script_ref || 'main' }}\` branch."
            echo ""
            echo "Triggered on: \`${{ inputs.target_branch }}\`"
            echo "Initiated by: @${GITHUB_ACTOR}"
            echo ""
            echo "## Review Instructions"
            echo "- Review the changes"
            echo "- Ensure CI passes"
            echo "- Approve and merge"
            echo EOF
          } >> "$GITHUB_ENV"

      - name: Create or update PR
        if: ${{ env.changes_exist == 'true' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_TITLE: "[${{ inputs.target_branch }}] Automated `kubectl` updates: `${{ steps.changes_check.outputs.pr_title_versions }}`"
        run: |
          EXISTING_PR=$(gh pr list --limit 100 --json title,url \
            | jq --arg t "${PR_TITLE}" -r '.[] | select(.title==$t) | .url')

          CREATED_PR=$(gh pr create \
            --title "${PR_TITLE}" \
            --body "${PR_BODY}" \
            --label "status/auto-created" \
            --label "dependencies" \
            --base "${{ inputs.target_branch }}" \
            --head "${UPDATE_BRANCH}")

          echo "Created PR: ${CREATED_PR}" >> $GITHUB_STEP_SUMMARY

          if [ -n "${EXISTING_PR}" ]; then
            echo "Closing previous PR: ${EXISTING_PR}"
            gh pr close "${EXISTING_PR}" --comment "Superseded by ${CREATED_PR}" --delete-branch
            echo "Closed previous PR: ${EXISTING_PR}" >> $GITHUB_STEP_SUMMARY
          fi